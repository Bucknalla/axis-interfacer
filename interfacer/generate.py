import sys
import os
import datetime
import json as j
import pyverilog.vparser.ast as vast
from pyverilog.ast_code_generator.codegen import ASTCodeGenerator
from interfacer import util
from jinja2 import Environment, PackageLoader

class Generate(object):
    def __init__(self):
        self.module = {}
        self.wrapper_file = None
        self.blackbox_file = None
        self.template_dir ='templates'
        self.jinja_env = Environment(
            loader = PackageLoader(__package__, 'templates'),
            trim_blocks = True,
            lstrip_blocks = True,
            keep_trailing_newline = True,
        )

    def __renderTemplate(self, template_file, target_file, template_vars = {}):
        template = self.jinja_env.get_template('/'.join([self.template_dir, template_file]))
        file_path = os.path.join(self.work_root, target_file)
        with open(file_path, 'w') as f:
            f.write(template.render(template_vars))

    def __autoGeneratedMessage(self, file_type):
        return ("/* \n"
                "* Module: {0}\n"
                "* File:   {1}\n"
                "* Date:   {2}\n"
                "* DO NOT MODIFY THIS FILE; AUTOMATICALLY GENERATED BY INTERFACER\n"
                "*/\n").format(self.module['name'],os.path.basename(file_type),datetime.datetime.now().strftime("%H:%M %d/%m/%Y"))

    def load(self, json):
        with open(json) as jf:
            obj = util.InterfaceObj(j.load(jf))
        self.module['name'] = obj.name
        self.module['ports'] = obj.ports

    def write(self, output_file, tcl=True): 
        with open(output_file+"_blackbox.v", "w") as outfile:
            outfile.write(self.__autoGeneratedMessage(output_file+"_blackbox.v"))          
            if self.blackbox_file != None:
                outfile.write(self.blackbox_file)
            else:
                raise ValueError('Missing module blackbox')  
        with open(output_file+"_wrapper.v", "w") as outfile:
            outfile.write(self.__autoGeneratedMessage(output_file+"_wrapper.v"))          
            if self.wrapper_file != None:
                outfile.write(self.wrapper_file)
            else:
                raise ValueError('Missing module wrapper') 
        if tcl:
            with open(output_file+"_wrapper.tcl", "w") as outfile:
                outfile.write(self.__autoGeneratedMessage(output_file+"_wrapper.v"))          
                if self.wrapper_file != None:
                    outfile.write(self.wrapper_file)
                else:
                    raise ValueError('Missing module wrapper') 
    
    def tclScript(self):
        pass

    def blackbox(self):
        port_list = []
        for each in self.module['ports']:
            width = vast.Width( vast.IntConst(self.module['ports'][each]['msb']), vast.IntConst(self.module['ports'][each]['lsb']) )
            if self.module['ports'][each]['direction'] == 'input':
                port = vast.Input(each, width=width)
            else:
                port = vast.Output(each, width=width)
            port_list.append(vast.Ioport(port))
        params = vast.Paramlist([])
        ports = vast.Portlist(port_list)

        ast = vast.ModuleDef(self.module['name'], params, ports, [])
        
        codegen = ASTCodeGenerator()
        self.blackbox_file = codegen.visit(ast)

    def wrapper(self):
        port_list = []
        black_list = []
        wire_list = []
        for each in self.module['ports']:
            width = vast.Width( vast.IntConst(self.module['ports'][each]['msb']), vast.IntConst(self.module['ports'][each]['lsb']) )
            if self.module['ports'][each]['direction'] == 'input':
                port = vast.Input(each, width=width)
            else:
                port = vast.Output(each, width=width)
            arg = vast.PortArg(each,vast.Identifier(each))
            wire = vast.Wire(each+"_wire", width=width)
            wire_list.append(wire)
            port_list.append(vast.Ioport(port,vast.Wire(each)))
            black_list.append(arg)
        params = vast.Paramlist([])
        ports = vast.Portlist( port_list )

        blackbox = vast.Instance(self.module['name'], 'blackbox', black_list, params,array=None)
        blackbox_list = vast.InstanceList(self.module['name'],[],[blackbox] )

        items = []
        items.append(blackbox_list)

        ast = vast.ModuleDef(self.module['name']+"_wrapper", params, ports, items)
        
        codegen = ASTCodeGenerator()
        self.wrapper_file = codegen.visit(ast)
        
if __name__ == '__main__':
    gen = Generate()
    gen.load("examples/test.json")
    gen.wrapper()
    gen.blackbox()
    gen.write("examples/output_thingy")